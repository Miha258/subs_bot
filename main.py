import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram import executor
from scheduler import Scheduler
import asyncio, time
from db import session, User
import datetime as dt
from create_bot import bot, dp, admins
from admin.promocodes import register_promo
from admin.paynaments import register_payment_methods
from admin.adds import register_adds
from admin.subs import register_subs
from admin.settings import register_settins
from admin.tariffs import register_tariffs
from admin.stats import register_stats
from user import register_user
from keyboards import *
from admin.utils import load_config
import threading

logging.basicConfig(level=logging.INFO)
schedule = Scheduler()

@dp.message_handler(commands=['start'], state = "*")
async def cmd_start(message: types.Message):
    user = session.query(User).filter_by(chat_id=message.from_id).first()
    if not user:
        user = User(chat_id = message.chat.id)
        session.add(user)
        session.commit()
    await send_welcome_message(message)
    

async def send_welcome_message(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.add(
        types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"),
        types.KeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ Dao?"),
        types.KeyboardButton("–ü–æ–º–æ—â—å")
    )
    if message.from_id in admins:
        keyboard_markup.add(types.KeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    await message.answer(
"""
üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–ª—É–±! üî•

–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è, –ø–æ—á–µ–º—É, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ —É—Å–∏–ª–∏—è, —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–º –º–∏—Ä–µ –∫–∞–∂–µ—Ç—Å—è –Ω–µ —Ç–∞–∫–∏–º, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å?
–≠—Ç–∞ –Ω–∞–≤—è–∑—á–∏–≤–∞—è –º—ã—Å–ª—å –Ω–µ –¥–∞–µ—Ç —Ç–µ–±–µ –ø–æ–∫–æ—è, –æ–Ω–∞ —Ç–æ–ª–∫–∞–µ—Ç —Ç–µ–±—è –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. 
–ò –≤–æ—Ç —Ç—ã –∑–¥–µ—Å—å. –î–∞, —Ç—ã —É–∂–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ —á–µ–≥–æ-—Ç–æ –≤–µ–ª–∏–∫–æ–≥–æ.
–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–ª–∞–¥–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–æ –æ–Ω –≤–ª–∞–¥–µ–µ—Ç –º–∏—Ä–æ–º! 
–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞, —ç—Ç–æ –Ω–∞—à –∫—Ä–µ–¥–æ. –í –ü—Ä–∏–≤–∞—Ç–Ω–æ–º –ö–ª—É–±–µ –ê–ª—å–∫—Ä–∏–ø—Ç–æ–Ω–µ —Ç—ã –æ–±—Ä–µ—Ç–µ—à—å –º–æ—â—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä–æ—é—Ç —Ç–µ–±–µ –≥–ª–∞–∑–∞ –Ω–∞ –º–∏—Ä —Ç–∞–∫–∏–º, –∫–∞–∫–∏–º —Ç—ã –µ–≥–æ –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª.
–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å. 

<strong>–¢—ã —Å –Ω–∞–º–∏?</strong>

üí• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è —Å–µ–π—á–∞—Å –∏ –≤–æ–∑—å–º–∏ —Å–≤–æ—é —Å—É–¥—å–±—É –≤ —Å–≤–æ–∏ —Ä—É–∫–∏! üí•
""",
        reply_markup=keyboard_markup,
        parse_mode = "html"
    )


@dp.message_handler(lambda m: m.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", state="*")
async def process_personal_cabinet(message: types.Message, state: FSMContext):
    await state.finish()
    user = session.query(User).filter_by(chat_id=message.from_id).first()
    if not user:
        return
    
    if not user.subscription_from or not user.subscription_to:
        return await message.answer("–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")

    sub_to: dt.datetime = user.subscription_to
    if sub_to:
        text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <strong>{"–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞" if not user.subscription_active else "–∞–∫—Ç–∏–≤–Ω–∞"}</strong>    
–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: <strong>{user.subscription_from.strftime('%Y-%m-%d') if user.subscription_from else "–Ω–µ—Ç"}</strong>
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: <strong>{user.subscription_to.strftime('%Y-%m-%d') if user.subscription_to else "–Ω–µ—Ç"}</strong>
–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ <strong>{(sub_to - dt.datetime.now()).days}</strong> –¥–Ω–µ–π –∫ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
"""
    else:
        text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <strong>{"–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞" if not user.subscription_active else "–∞–∫—Ç–∏–≤–Ω–∞"}</strong>    
–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: <strong>{user.subscription_from.strftime('%Y-%m-%d') if user.subscription_from else "–Ω–µ—Ç"}</strong>
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: <strong>{user.subscription_to.strftime('%Y-%m-%d') if user.subscription_to else "–Ω–µ—Ç"}</strong>
"""
    await message.answer(text, reply_markup=get_user_panel_kb(user.subscription_active), parse_mode = "html")

@dp.message_handler(lambda m: m.text == "–ß—Ç–æ —Ç–∞–∫–æ–µ Dao?", state="*")
async def process_what_is_dao(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("""
–í –Ω–∞—à–µ–º DAO –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –∏—Å—Å–ª–µ–¥—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —ç–∫–æ–Ω–æ–º–∏—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞—à —Å–ª–æ–≥–∞–Ω –≥–ª–∞—Å–∏—Ç: "–ï—Å–ª–∏ —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –º–∏—Ä–æ–º!"
–ß–µ–≥–æ —É –Ω–∞—Å –Ω–µ—Ç?
–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å: –≤ –Ω–∞—à–µ–º DAO –Ω–µ—Ç –º–µ—Å—Ç–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –∏ –≤—Å–µ–º—É, —á—Ç–æ —Å —ç—Ç–∏–º —Å–≤—è–∑–∞–Ω–æ. –ó–∞ —Å–∫–∞–º–æ–º –∏ –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã. –£ –Ω–∞—Å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Å—Ç–Ω–æ: —á–µ–º –±–æ–ª—å—à–µ —É—Å–∏–ª–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥. –£ –Ω–∞—Å –Ω–µ—Ç –º–µ—Å—Ç–∞ –ª–µ–≥–∫–∏–º –¥–µ–Ω—å–≥–∞–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞–º. –í–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî –≤–∞—à–µ —Ç–≤–æ—Ä–µ–Ω–∏–µ, –∞ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—Å –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–ù–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
1- –†–µ—Ç—Ä–æ–¥—Ä–æ–ø—ã
2- NFT-—Ñ–ª–∏–ø—ã/–∫–æ–ª—ã –∏ –≤—ã–±–∏–≤–∞–Ω–∏–µ –≤–∞–π—Ç–ª–∏—Å—Ç–æ–≤
3 - –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
4 - –¢–µ—Å—Ç–Ω–µ—Ç—ã
5 - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
6 - –ü—Ä–æ—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö
–º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å
–í –Ω–∞—à–µ–º DAO –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –≠—Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞, –∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –Ω–∞–∏–≤—ã—Å—à–∏–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –º–∏—Ä–æ–º!
""")

@dp.message_handler(lambda m: m.text == "–ü–æ–º–æ—â—å", state="*")
async def process_help(message: types.Message, state: FSMContext):
    await state.finish()
    config = load_config()
    await message.answer(f"–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø–æ–º–æ—â—å –∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ –ª—é–±–æ–º—É —Å–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É!\n–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {config['support']}")


@dp.message_handler(lambda m: m.from_id in admins, text = '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', state = "*")
async def open_admin(message: types.Message):
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup = get_main_admin_menu_kb())


@dp.message_handler(lambda m: m.from_id in admins and m.text == '–ù–∞–∑–∞–¥', state = "*")
async def back_to_main_admin_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.delete()
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup = get_main_admin_menu_kb())


@dp.callback_query_handler(lambda cb: cb.data == "back_to_main_admin_menu", state = "*")
async def back_to_main_admin_menu(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.delete()
    await query.message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup = get_main_admin_menu_kb())
    


async def on_startup(dp):
    threading.Thread(target = lambda: run_tasks()).start()
    await bot.set_my_commands([
        types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    ])


def update_retries():
    users = session.query(User).all()
    for user in users:
        user.invite_link_retries = 3
        session.commit()


async def check_subscription():
    config = load_config()
    chat = config.get('chat')
    if chat:
        users = session.query(User).filter_by(subscription_active = True).all()
        if users:
            try:
                for user in users:
                    is_in_chat = await bot.get_chat_member(chat, user.id)
                    if user.subscription_to < dt.datetime.now() and is_in_chat:
                        await bot.kick_chat_member(chat, user.id)
                        for admin in admins:
                            try:
                                tg_user = await bot.get_chat(user.chat_id)
                                await bot.send_message(admin, f"–£ @{tg_user.username} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞.–ü–æ—á—Ç–∞: <strong>{user.email}</strong>.–ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ Notion", parse_mode = "html")
                            except Exception:
                                await bot.send_message(admin, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞.–ü–æ—á—Ç–∞: <strong>{user.email}</strong>.–ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ Notion", parse_mode = "html")
            except Exception as e:
                print(e)

schedule.daily(dt.time(hour = 23, minute=59), update_retries)
schedule.minutely(dt.time(minute = 1), lambda: asyncio.run(check_subscription()))

def run_tasks():
    while True:
        schedule.exec_jobs()
        time.sleep(1)


if __name__ == '__main__':
    register_promo(dp)
    register_payment_methods(dp)
    register_adds(dp)
    register_subs(dp)
    register_settins(dp)
    register_stats(dp)
    register_tariffs(dp)
    register_user(dp)
    executor.start_polling(dp, on_startup=on_startup)
